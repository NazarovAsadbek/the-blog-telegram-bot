import axios from 'axios';
import { Markup } from 'telegraf';
import ConfigService from '../config/config.service.js';
import { ScenesInitializer } from './comman.class.js';

/* ToDo:
  1.–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç Title - –∞
  2.–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å—Ç Description - –∞
  3.–û–±—Ä–∞–±–æ—Ç–∫–∞ Img(Body)
  4.–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞
  5.–ó–∞–ª–∏–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∞–∫.
*/

class AuthorizationScene extends ScenesInitializer {
  constructor() {
    super();
    this.configService = new ConfigService();
    this.url = this.configService.get('API_URL');
    this.sceneSteps = this.buildSceneSteps();
    this.scene = this.createWizardScene('create_post_scene', this.sceneSteps);
    this.setupOnEnterScene();
  }

  buildSceneSteps() {
    return [
      this.gettingStartedBotStep.bind(this),
      this.authorizationStep.bind(this),
    ];
  }

  setupOnEnterScene() {
    this.scene.enter((ctx) => ctx.reply('–°–æ–∑–¥–∞–π—Ç–µ –ø–æ—Å—Ç'));
  }

  processError(ctx, error) {
    ctx.scene.state = {};
    ctx.reply(error);
    return ctx.scene.leave();
  }

  buildUserFormData(state) {
    if (!state.email) {
      throw new Error('–ü–æ–ª–µ email –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ');
    }
    if (!state.password) {
      throw new Error('–ü–æ–ª–µ password –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ');
    }

    return {
      user: {
        email: state.email,
        password: state.password,
      },
    };
  }

  gettingStartedBotStep(ctx) {
    try {
      const message = ctx?.message?.text ?? '';
      ctx.scene.state.email = message;

      if (message === '/start') {
        ctx.scene.state.email = null;
        return ctx.scene.leave();
      }
      ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
      return ctx.wizard.next();
    } catch (e) {
      return this.processError(ctx, '–£–ø—Å... –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-—Ç–∞ –æ—à–∏–±–∫–∞');
    }
  }

  async authorizationStep(ctx) {
    try {
      const message = ctx?.message?.text ?? '';
      ctx.scene.state.password = message;

      if (ctx.scene.state.email === '/start' && ctx.scene.state.password === '/start') {
        ctx.scene.state.email = null;
        ctx.scene.state.password = null;
        return ctx.scene.leave();
      }

      const formData = this.buildUserFormData(ctx.scene.state);
      const response = await axios.post(`${this.url}/users/login`, formData);
      if (response.status >= 400) {
        return this.processError(ctx, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!');
      }

      if (response?.data?.user?.token) {
        ctx.scene.state.token = response?.data?.user?.token;
        ctx.reply(
          '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å!',
          Markup.keyboard([
            ['–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø–æ—Å—Ç—ã üìú', '–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç –ø–æ id üî°'], // –ü–µ—Ä–≤—ã–π —Ä—è–¥ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
            ['–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç üÜô', '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç üÜï'], // –í—Ç–æ—Ä–æ–π —Ä—è–¥ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
            ['–£–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç ‚ùå'], // –¢—Ä–µ—Ç–∏–π —Ä—è–¥ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
          ]).resize(),
        );
      }
      return ctx.scene.leave();
    } catch (e) {
      return this.processError(ctx, '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!');
    }
  }

  getWizardScene() {
    return this.scene;
  }
}

export default AuthorizationScene;
